#!/usr/bin/env python3

import shlex       # Sanitize strings sent to bash
import subprocess  # Pushing bash commands
import sys         # argv
import string      # Clearing jobstats entries of M's, G's, etc
import pprint
import re
import shutil      # Get terminal width
import statistics
import mysql.connector as mysql
import pkg_resources # Read from package directory
import configparser
import os
import operator
import datetime
from dateutil.relativedelta import relativedelta
import time



class Colors:
    GREEN   = '\033[92m'
    CYAN    = '\033[36m'
    YELLOW  = '\033[93m'
    ORANGE  = '\033[208m'
    RED     = '\033[91m'
    END     = '\033[0m'


def getSlurmAccountUsers(acc):
    """
    Desc: Get a list of slurm users who belong to a given account.

    Args:
        acc (string): name of slurm account to search

    Returns:
        List of account user names. None of account doesn't exist/no users
        belong to it.
    """
    out = subprocess.getstatusoutput('sshare -a -P')[1].split('\n')
    users = []

    for i in out:
        users.append(i.split('|'))
        
    users = [i for i in users if acc in i[0]]

    users = [i[1] for i in users if not i[1] == 'parent' and not i[1] == '']

    return users


def getSlurmAccounts():
    out = subprocess.getstatusoutput('sshare -l -P')[1].split('\n')[1::]
    accounts = []

    for i in out:
        accounts.append(i.split('|'))
        
    accountNames = []
    for i in accounts :
        if i[0].strip() not in accountNames:
            accountNames.append(i[0].strip())

    return accountNames


def getJobStats(cursor, account, fromDate=None, toDate=None):
    """
    Desc: Retrieve jobstate data from the database

    Args:
        account (string): Name of slurm account
        fromDate (string) (optional): Add a start date
        toDate (string) (optional): Add an end date
        cursor (mysql.connector): Reuse a mysql connection instead of
                               initializing a new one

    Returns:
        List of dictionaries containing jobstats data for a user
    """
    data = []

    query =  'SELECT username,memoryreq,memoryuse,idealcpu,cputime,tlimitreq,tlimituse'
    query += ' FROM jobs WHERE account = %s'

    args = [account]

    if fromDate:
        query += ' AND date >= %s'
        args.append(fromDate)

    if toDate:
        if fromDate:
            query += ' AND '

        query += 'date <= %s'
        args.append(toDate)
    
    cursor.execute(query, tuple(args))

    for username, memory_req, memory_use, ideal_cpu, cpu_time, tlimit_req, tlimit_use in cursor:
        data.append({
            'username': username,
            'memory-req': memory_req if memory_req else 0,
            'memory-use': memory_use if memory_use else 0,
            'ideal-cpu': ideal_cpu if ideal_cpu else 0,
            'cpu-time': cpu_time if cpu_time else 0,
            'tlimit-req': tlimit_req if tlimit_req else 0,
            'tlimit-use': tlimit_use if tlimit_use else 0
        })

    return data


def parseAccountStats(data):
    """
    Desc: Parse a retrieved account's jobstats data.

    Args:
        data: array of dictionaries representing day efficiencies for a user

    Returns:
        {
            'memory': float,
            'cpu': float,
            'tlimit': float,
            'users': {
                username: {
                    'memory:' float,
                    'cpu': float,
                    'tlimit': float
                },
                ...
            }
        }
    """
    out = {
        'memory': None,
        'cpu':    None,
        'tlimit': None,
        'users': {}
    }

    # account-wide score
    tlimit = [0, 0]
    cpu    = [0, 0]
    memory = [0, 0]

    # store user stats in temporary place
    users = {}

    for entry in data:
        if entry['username'] not in users:
            users[entry['username']] = {
                'tlimit': [0, 0],
                'cpu':    [0, 0],
                'memory': [0, 0]
            }

        users[entry['username']]['tlimit'][0] += entry['tlimit-use']
        users[entry['username']]['tlimit'][1] += entry['tlimit-req']
        tlimit[0] += entry['tlimit-use']
        tlimit[1] += entry['tlimit-req']

        users[entry['username']]['cpu'][0] += entry['cpu-time']
        users[entry['username']]['cpu'][1] += entry['ideal-cpu']
        cpu[0] += entry['cpu-time']
        cpu[1] += entry['ideal-cpu']

        users[entry['username']]['memory'][0] += entry['memory-use']
        users[entry['username']]['memory'][1] += entry['memory-req']
        memory[0] += entry['memory-use'] 
        memory[1] += entry['memory-req']

    out['memory'] = round(memory[0] / memory[1] * 100, 2) if 0 != memory[1] else None
    out['cpu']    = round(cpu[0] / cpu[1] * 100, 2) if 0 != cpu[1] else None
    out['tlimit'] = round(tlimit[0] / tlimit[1] * 100, 2) if 0 != tlimit[1] else None
    
    out['memory-req'] = memory[1]
    out['memory-use'] = memory[0]
    out['ideal-cpu']  = cpu[1]
    out['cpu-time']   = cpu[0]
    out['tlimit-req'] = tlimit[1]
    out['tlimit-use'] = tlimit[0]
    
    for user in users:
        out['users'][user] = {}

        try:
            out['users'][user]['memory'] = round(users[user]['memory'][0] / users[user]['memory'][1] * 100, 2) 

        except:
            out['users'][user]['memory'] = None

        try:
            out['users'][user]['tlimit'] = round(users[user]['tlimit'][0] / users[user]['tlimit'][1] * 100, 2)

        except:
            out['users'][user]['tlimit'] = None
        
        try:
            out['users'][user]['cpu'] = round(users[user]['cpu'][0] / users[user]['cpu'][1] * 100, 2)

        except:
            out['users'][user]['cpu'] = None

    return out


def timeStringToSeconds(timeString):
    """
    Desc: Convert a time string to seconds total elapsed.

    Args:
        timeString (string): Timestamp of the form 'D-HH:MM:SS.SSS'

    Returns:
        Integer or floating point representation of seconds elapsed.
    """
    rightDecimal = 0
    timeInSeconds = 0
    timeIndex = 0

    timeParsed = timeString.split('.')

    if len(timeParsed) > 1:
        timeInSeconds += float('0.' + timeParsed[1])

    timeParsed = timeParsed[0]
    
    timeParsed = re.split('-|:', timeParsed)

    # Does elapsed contain days? (*1-*00:00:00)
    if len(timeParsed) == 4:
        timeInSeconds += int(timeParsed[0]) * 24 * 60 * 60

    # Does time contain hours?
    if len(timeParsed) >= 3:
        timeInSeconds += int(timeParsed[-3]) * 60 * 60  # Hours

    # Does time contain minutes?
    if len(timeParsed) >= 2:
        timeInSeconds += int(timeParsed[-2]) * 60       # Minutes
    
    # Does time contain seconds?
    if len(timeParsed) >= 1:
        timeInSeconds += int(timeParsed[-1])            # Seconds

    return timeInSeconds


def main():
    # Read in config args
    config = configparser.ConfigParser()

    # Attempt to read from the local directory
    configFilePath = (os.path.dirname(__file__) + str('/jobstats-config.ini'))

    config.read(configFilePath)
    
    # If config file is not in local directory, check resource directory
    if not 'DEFAULTS' in config:
        config.read_string(pkg_resources.resource_string('jobstats', 'jobstats-config.ini').decode('utf-8'))
    
    SHOW_JOB_CHILDREN  = config['DEFAULTS']['SHOW_JOB_CHILDREN'] == 'True' 
    DB_USER = config['DEFAULTS']['DB_USER']   
    DB_DB   = config['DEFAULTS']['DB_DB']   
    DB_PASS = config['DEFAULTS']['DB_PASS']   
    DB_HOST = config['DEFAULTS']['DB_HOST']   
   
    try:
        cnx = mysql.connect(host=DB_HOST, user=DB_USER, password=DB_PASS, db=DB_DB)
    
    except:
        print('Error: No connection to database')
        exit()

    SHOW_EMPTY_USERS = False
    NO_SIZE_LIMIT    = False
    PARSEABLE        = False
    START_DATE       = (datetime.datetime.today() + relativedelta(days=-1)).strftime('%Y%m%d')
    END_DATE         = (datetime.datetime.today() + relativedelta(days=0)).strftime('%Y%m%d')
    ALL_ACCOUNTS     = False
    NO_COLOR         = False
    THRESHOLD        = 100    
    ACCOUNT_NUM      = 0
    SORTFLAG         = 0
    POSSIBLE_DATE_FORMATS = ['%m/%d/%Y', '%m/%d/%y', '%m%d%y', '%m%d%Y', '%Y-%m-%d', '%m.%d.%Y', '%Y/%m/%d', '%y/%m/%d']

    if '--no-color' in sys.argv:
        NO_COLOR = True
        sys.argv.remove('--no-color')

    if '-S' in sys.argv:
        START_DATE = sys.argv[sys.argv.index('-S') + 1]
        sys.argv.remove('-S')
        sys.argv.remove(START_DATE)
        for date_format in POSSIBLE_DATE_FORMATS :
            try:
                parsed_date = datetime.datetime.strptime(START_DATE, date_format).date() # try to get the date
                break # if correct format, don't test any other formats
            except ValueError:
                pass # if incorrect format, keep trying other formats
        START_DATE=datetime.datetime.strptime(str(parsed_date), '%Y-%m-%d').strftime('%m/%d/%y')
      


    if '-E' in sys.argv:
        END_DATE = sys.argv[sys.argv.index('-E') + 1]
        sys.argv.remove('-E')
        sys.argv.remove(END_DATE)
        for date_format in POSSIBLE_DATE_FORMATS :
            try:
                parsed_date = datetime.datetime.strptime(END_DATE, date_format).date() # try to get the date
                break # if correct format, don't test any other formats
            except ValueError:
                pass # if incorrect format, keep trying other formats
        END_DATE=datetime.datetime.strptime(str(parsed_date), '%Y-%m-%d').strftime('%m/%d/%y')  

    if  '-W' in sys.argv:
        sys.argv.remove('-W')    
        START_DATE=(datetime.datetime.today() + relativedelta(days=-7)).strftime('%Y%m%d')
        END_DATE=(datetime.datetime.today() + relativedelta(days=0)).strftime('%Y%m%d')
    
    if '-M' in sys.argv:
        sys.argv.remove('-M')
        START_DATE=(datetime.datetime.today() + relativedelta(days=-31)).strftime('%Y%m%d')
        END_DATE=(datetime.datetime.today() + relativedelta(days=0)).strftime('%Y%m%d')
    if '-Q' in sys.argv:
        sys.argv.remove('-Q')
        START_DATE=(datetime.datetime.today() + relativedelta(days=-100)).strftime('%Y%m%d')
        END_DATE=(datetime.datetime.today() + relativedelta(days=0)).strftime('%Y%m%d')
    if '--parseable' in sys.argv:
        PARSEABLE = True
        sys.argv.remove('--parseable')
    if '--show-empty' in sys.argv:
        SHOW_EMPTY_USERS = True
        sys.argv.remove('--show-empty')

    if '--all-accounts' in sys.argv:
        ALL_ACCOUNTS = True
        sys.argv.remove('--all-accounts')
  
    if '--threshold' in sys.argv:
        THRESHOLD = sys.argv[sys.argv.index('--threshold') + 1]
        sys.argv.remove('--threshold')
        sys.argv.remove(THRESHOLD)
    if '--number' in sys.argv:
        ACCOUNT_NUM = sys.argv[sys.argv.index('--number') + 1]
        sys.argv.remove('--number')
        sys.argv.remove(ACCOUNT_NUM)
    if '--memory' in sys.argv:
        SORTFLAG = 1
    if '--cores' in sys.argv:
        SORTFLAG = 2
    if '--time' in sys.argv:
        SORTFLAG = 3
        



    if not ALL_ACCOUNTS and (len(sys.argv) == 1 or '--help' in sys.argv or '-h' in sys.argv):
        print('Usage: ', sys.argv[0].split('/')[-1], ' [ACCOUNT] [OPTION]...')
        print('Show usage statistics for a slurm account and it\'s users')
        print('\n  --show-empty    show slurm users with no jobs')
        print('  --parseable     make output parseable')
        print('  -S X            show stats for jobs since some date')
        print('  -E X            show stats for jobs up to some date')
        print('  -W              show stats for jobs for the past week' )
        print('  -M              show stats for jobs for the past month' )
        print('  -Q              show stats for jobs for the past quarter' )
        print('  --all-accounts  run for all accounts on slurm')
        print('  --threshold     shows stats below a specified total')
        print('  --number        shows the top accounts')
        print('  --memory        sorts the table by the memory')
        print('  --cores         sorts the table by the cores')
        print('  --time          sorts the table by the time')
        print('  --no-color      do not colorize stats')
        print('\nGot bugs? Report to hpcsupport@nau.edu')
        exit()

    terminalWidth = shutil.get_terminal_size((80, 80))[0]
    columnWidth = int(terminalWidth / 5)

    labelString = ''

    if not PARSEABLE:
        if ALL_ACCOUNTS:
            labelString =  'Account' + ' ' * (columnWidth - len('Account'))
        
        else:
            labelString =  'User' + ' ' * (columnWidth - len('User'))
        
        labelString += 'Mem' + ' ' * (columnWidth - len('Mem'))
        labelString += 'CPU' + ' ' * (columnWidth - len('CPU'))
        labelString += 'TLimit' + ' ' * (columnWidth - len('TLimit'))
        labelString += 'Total' + ' ' * (columnWidth - len('Total'))
    
    else:
        if ALL_ACCOUNTS:
            labelString = 'Account|Mem|CPU|TLimit|Total'

        labelString = 'User|Mem|CPU|TLimit|Total'

    print(labelString)

    if not PARSEABLE:
        print('=' * terminalWidth)

    accountStats = {
        'cpu': 0,
        'memory': 0,
        'tlimit': 0
    }
    
    resourcesReserved = {
        'cpu': 0,
        'memory': 0,
        'tlimit': 0
    }

    resourcesUsed = {
        'cpu': 0,
        'memory': 0,
        'tlimit': 0
    } 
    
    cursor = cnx.cursor()

    data = []
    if ALL_ACCOUNTS:
        accounts = getSlurmAccounts()
        group_efficiency=""
        tuples={}
        for account in accounts:
            stats = getJobStats(cursor, account, START_DATE, END_DATE)
            stats = parseAccountStats(stats)

            totalGrades = [stats['memory'], stats['cpu'], stats['tlimit']]
            final = [i if i else '-' for i in totalGrades]

            if len([i for i in totalGrades if i]) == 0 and not SHOW_EMPTY_USERS:
                continue

            try:
                total = str(round(statistics.mean([i for i in totalGrades if i]), 2))
            
            except:
                total = '-'

            
            resourcesReserved['memory'] += stats['memory-req']
            resourcesReserved['cpu']    += stats['ideal-cpu']
            resourcesReserved['tlimit'] += stats['tlimit-req']

            resourcesUsed['memory'] += stats['memory-use']
            resourcesUsed['cpu']    += stats['cpu-time']
            resourcesUsed['tlimit'] += stats['tlimit-use']
          
            if not PARSEABLE:
                if len(account) < columnWidth:
                    userStatsString = account
                
                else:
                    userStatsString = account[:columnWidth-1] + '+'

                userStatsString += ' ' * (columnWidth - len(account))                    

                for i in range(len(final)):
                    grade = ''
                    gradeEnd = ''
                    if not NO_COLOR and final[i] != '-':
                        if float(final[i]) < 33:
                            grade = Colors.RED

                        elif float(final[i]) < 66:
                            grade = Colors.YELLOW
                        
                        else:
                            grade = Colors.GREEN

                        gradeEnd = Colors.END
                    
                    userStatsString += grade + str(final[i])
                    userStatsString += gradeEnd
                    userStatsString += ' ' * (columnWidth \
                                              - len(str(final[i])))
               
                userStatsString += total
                userStatsString += ' ' * (columnWidth - len(total))


            else:
                userStatsString =  account + '|' + str(final[0]) + '|'
                userStatsString += str(final[1]) + '|'
                userStatsString += str(final[2]) + '|' + total
            
           
            group_efficiency=userStatsString
            
            #check if data was parseable and split based on the delimiter
            if group_efficiency.find('|') > -1:
                lines=group_efficiency.split('|')
            else:
                lines=group_efficiency.split()
                  
            listtosort = []
           #put each line  into a list 
            for x in lines:
                listtosort.append(x)
            field1=listtosort[0]
            field2=listtosort[1]
            field3=listtosort[2]
            field4=listtosort[3]
            field5=listtosort[4]
            
            #handle show empty case
            if listtosort[4] == '-':
                field5 = '0.00'
            else:
                field5 = listtosort[4]
            if listtosort[3] == '-':
                field4 = '0.00'
            else:
                field4 = listtosort[3]
            if listtosort[2] == '-':
                field3 = '0.00'
            else:
                field3 = listtosort[2]
            if listtosort[1] == '-':
                field2 = '0.00'
            else:
                field2 = listtosort[1]
            
            #take values and put into a dictionary to sort 
            if SORTFLAG == 0:
                key=float(field5)
            if SORTFLAG == 1:
                reaesc = re.compile(r'\x1b[^m]*m')
                new_field2 = reaesc.sub('', field2)
                key=float(new_field2)
            if SORTFLAG == 2:
                reaesc = re.compile(r'\x1b[^m]*m')
                new_field3 = reaesc.sub('', field3)
                key=float(new_field3)
            if SORTFLAG == 3:
                reaesc = re.compile(r'\x1b[^m]*m')
                new_field4 = reaesc.sub('', field4)
                key=float(new_field4)
            key+=100
            #if key is 100 we want to return to original value of 0
            if key ==100:
                key =0
            key=str(key)+field1
            tuples.update({key:(field1,field2,field3,field4,field5)})
        sortedlist=sorted(tuples.items(),key=operator.itemgetter(0),reverse=True)
        
        #take sorted list from dictionary and put them into a list
        for elem in sortedlist:
            elem=list(elem)
            values=(elem[1])
            data.append([values[0],values[1],values[2],values[3],values[4]])
        line=''
        count=0
        #take each element in data and ignore color codes to account for formatting
        for row in data:
            line=''
            for elem in row:
                elem=re.sub('0.00','-',str(elem))
                reaesc = re.compile(r'\x1b[^m]*m') 
                new_text = reaesc.sub('', str(elem))
                length=len(str(new_text))
                line+=  str(elem) + (' '*(columnWidth-length))
             #check if we were givrn number of accounts to display
            if count < float(ACCOUNT_NUM):
               #if given number of accounts print for that number
               if PARSEABLE:
                   print(re.sub(r"\s+", '|', line))
                   count+=1      
               else:         
                   print(line)
                   count+=1
            #if number of accounts were not given, print the display as normal
            if count ==0:
                if PARSEABLE:
                    linebuffer=line.split()
                    value= linebuffer[4]
                    #changes value back to original starting value
                    if value == '-':
                        value = 0
                    if float(value) < float(THRESHOLD):
                        print(re.sub(r"\s+", '|', line))

                else:
                    linebuffer=line.split()
                    value= linebuffer[4]
                    #changes value back to the original value
                    if value == '-':
                        value = 0
                    if float(value) <  float(THRESHOLD):
                        print(line)
             
    else:
        account = sys.argv[1]
        stats = getJobStats(cursor, account, START_DATE, END_DATE)
        stats = parseAccountStats(stats)

        resourcesReserved['memory'] += stats['memory-req']
        resourcesReserved['cpu']    += stats['ideal-cpu']
        resourcesReserved['tlimit'] += stats['tlimit-req']

        resourcesUsed['memory'] += stats['memory-use']
        resourcesUsed['cpu']    += stats['cpu-time']
        resourcesUsed['tlimit'] += stats['tlimit-use']
        efficiency=''
        tuples={} 
        for user in stats['users']:
            if len([i for i in stats['users'][user] if i and i != 0]) == 0:
                if not SHOW_EMPTY_USERS:
                    continue

            if stats:
                userStatsString = ''
                
                totalGrades = [stats['users'][user][i] if stats['users'][user][i] else '-' for i in stats['users'][user] ] 
                total = '-'

                total = str(round(statistics.mean([stats['users'][user][i] for i in stats['users'][user] if stats['users'][user][i]]), 2))

                total = '-' if total == 0 else total
                
                if not PARSEABLE:
                    userStatsString = user
                    userStatsString += ' ' * (columnWidth - len(user))                    

                    for i in range(len(totalGrades)):
                        grade = ''
                        gradeEnd = ''
                        if not NO_COLOR and totalGrades[i] != '-':
                            if totalGrades[i] < 33:
                                grade = Colors.RED

                            elif totalGrades[i] < 66:
                                grade = Colors.YELLOW
                            
                            else:
                                grade = Colors.GREEN

                            gradeEnd = Colors.END
                        
                        userStatsString += grade + str(totalGrades[i]) + gradeEnd
                        userStatsString += ' ' * (columnWidth \
                                                  - len(str(totalGrades[i])))
                   
                    userStatsString += total
                    userStatsString += ' ' * (columnWidth - len(total))

                else:
                    userStatsString =  user + '|' + str(totalGrades[0]) + '|'
                    userStatsString += str(totalGrades[1]) + '|' 
                    userStatsString += str(totalGrades[2]) + '|'
                    userStatsString += total
            #takes multiline variable and splits intp segments
            efficiency=userStatsString.split('\n')    
            #reads each line and assigns each field to a variable
            for line in efficiency:
                if line.find('|') < 0: 
                    display=line.split()
                else:
                    display=line.split('|')
                listtosort=[]
                for x in display:
                    listtosort.append(x)
                field1=listtosort[0]
                field2=listtosort[1]
                field3=listtosort[2]
                field4=listtosort[3]
                field5=listtosort[4]
            
                #handle show empty case
                if listtosort[4] == '-':
                    field5 = 0
                else:
                    field5 = listtosort[4]
                #take values and put into a dictionary to sort
                key=float(field5)
                key+=100
                tuples.update({key:(field1,field2,field3,field4,field5)})
            sortedlist=sorted(tuples.items(),key=operator.itemgetter(0),reverse=True)
            for elem in sortedlist:
                
                elem=list(elem)
                values=(elem[1])
                data.append([values[0],values[1],values[2],values[3],values[4]])
            line=''
            count=0
            #take each element in data and ignore color codes to account for formatting
        for row in data:
            line=''
            for elem in row:
                reaesc = re.compile(r'\x1b[^m]*m')
                new_text = reaesc.sub('', str(elem))
                length=len(str(new_text))
                line+=  str(elem) + (' '*(columnWidth-length))

            if PARSEABLE:
               print(re.sub(r"\s+", '|', line))


            else: 
               print(line) 
            #for line in sortedlist:
             #   print(line) 
            

    # Calculate slurm account stats
    finalStats = {
        'memory': '-',
        'cpu': '-',
        'tlimit': '-'
    }

    for key in resourcesReserved:
        if resourcesReserved[key] != 0:
            finalStats[key] = round(resourcesUsed[key] / resourcesReserved[key] * 100, 2)

    finalGrades = [i for i in finalStats.values() if i != '-']
    finalMean = '-'
    if len(finalGrades) > 0:
        finalMean = str(round(statistics.mean(finalGrades), 2))

    finalStatsString = ''

    if not PARSEABLE:
        print('=' * terminalWidth + '\n')
        finalStatsString =  'Requested Memory: ' + str(finalStats['memory']) + '\n'
        finalStatsString += 'Requested Cores : ' + str(finalStats['cpu']) + '\n'
        finalStatsString += 'Time Limit      : ' + str(finalStats['tlimit']) + '\n'
        finalStatsString += '=' * len('Efficiency Score: ' + finalMean) + '\n'
        finalStatsString += 'Efficiency Score: ' + finalMean + '\n'
        finalStatsString += '=' * len('Efficiency Score: ' + finalMean) + '\n'

    else:
        finalStatsString =  'STATS|' + str(finalStats['memory']) + '|'
        finalStatsString += str(finalStats['cpu']) + '|' + str(finalStats['tlimit']) + '|'
        finalStatsString += finalMean

    print(finalStatsString)

if __name__ == '__main__':
    main()
